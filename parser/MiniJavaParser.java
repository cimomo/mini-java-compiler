
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 16 21:52:59 PDT 2008
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import syntaxtree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 16 21:52:59 PDT 2008
  */
public class MiniJavaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MiniJavaParser() {super();}

  /** Constructor which sets the default scanner. */
  public MiniJavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiniJavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\010\000\002\006\012\000\002\012\004\000" +
    "\002\012\002\000\002\013\005\000\002\007\004\000\002" +
    "\007\002\000\002\010\016\000\002\011\004\000\002\011" +
    "\004\000\002\011\002\000\002\014\003\000\002\014\002" +
    "\000\002\015\004\000\002\016\004\000\002\016\002\000" +
    "\002\017\004\000\002\020\004\000\002\021\005\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\005\000\002\022\004\000\002\022\002\000\002\023\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\011\000\002\025\007\000\002\026\007\000\002\027" +
    "\006\000\002\030\011\000\002\031\004\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\006\000\002\036\005\000\002" +
    "\036\010\000\002\036\006\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\007\000\002\036\007\000" +
    "\002\036\006\000\002\036\004\000\002\036\005\000\002" +
    "\036\005\000\002\036\006\000\002\032\003\000\002\032" +
    "\002\000\002\033\004\000\002\034\004\000\002\034\002" +
    "\000\002\035\004\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\004\010\006\001\002\000\006\002\ufffc\010" +
    "\ufffc\001\002\000\004\002\166\001\002\000\004\053\007" +
    "\001\002\000\046\011\uffb9\030\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9\053" +
    "\uffb9\001\002\000\004\045\011\001\002\000\004\004\012" +
    "\001\002\000\004\005\013\001\002\000\004\006\014\001" +
    "\002\000\004\007\015\001\002\000\004\041\016\001\002" +
    "\000\004\026\017\001\002\000\004\043\020\001\002\000" +
    "\004\044\021\001\002\000\004\053\007\001\002\000\004" +
    "\042\023\001\002\000\004\045\024\001\002\000\016\003" +
    "\035\016\034\020\025\027\032\045\026\053\007\001\002" +
    "\000\004\041\162\001\002\000\020\003\uffe3\016\uffe3\020" +
    "\uffe3\027\uffe3\045\uffe3\046\uffe3\053\uffe3\001\002\000\006" +
    "\032\146\043\147\001\002\000\004\046\144\001\002\000" +
    "\030\003\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\027\uffdf\045\uffdf\046\uffdf\053\uffdf\001\002\000" +
    "\004\041\140\001\002\000\030\003\uffde\014\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\027\uffde\045\uffde\046" +
    "\uffde\053\uffde\001\002\000\004\041\043\001\002\000\004" +
    "\051\042\001\002\000\030\003\uffe0\014\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\027\uffe0\045\uffe0\046\uffe0" +
    "\053\uffe0\001\002\000\030\003\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\027\uffdd\045\uffdd\046\uffdd" +
    "\053\uffdd\001\002\000\030\003\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\027\uffdc\045\uffdc\046\uffdc" +
    "\053\uffdc\001\002\000\030\003\uffe1\014\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\027\uffe1\045\uffe1\046\uffe1" +
    "\053\uffe1\001\002\000\030\003\uffd6\014\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\027\uffd6\045\uffd6\046\uffd6" +
    "\053\uffd6\001\002\000\026\012\053\013\050\015\046\023" +
    "\047\024\051\031\052\033\056\041\055\052\044\053\007" +
    "\001\002\000\032\030\uffcc\033\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\001\002\000\034\030\uffc9\033\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\135\042\uffc9\043\uffc9\044\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\001\002\000\006\022\123\053" +
    "\007\001\002\000\032\030\uffcb\033\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\001\002\000\032\030\uffc7\033\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\044\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\001\002\000\032\030\uffca\033\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\042\uffca\043\uffca\044" +
    "\uffca\047\uffca\050\uffca\051\uffca\001\002\000\026\012\053" +
    "\013\050\015\046\023\047\024\051\031\052\033\056\041" +
    "\055\052\044\053\007\001\002\000\032\030\uffc8\033\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\001\002\000\024\030\067" +
    "\033\062\035\064\036\065\037\070\040\063\042\116\043" +
    "\066\047\071\001\002\000\026\012\053\013\050\015\046" +
    "\023\047\024\051\031\052\033\056\041\055\052\044\053" +
    "\007\001\002\000\004\053\007\001\002\000\004\034\060" +
    "\001\002\000\026\012\053\013\050\015\046\023\047\024" +
    "\051\031\052\033\056\041\055\052\044\053\007\001\002" +
    "\000\032\030\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\042\uffc0\043\066\044\uffc0\047\071\050\uffc0\051\uffc0" +
    "\001\002\000\026\012\053\013\050\015\046\023\047\024" +
    "\051\031\052\033\056\041\055\052\044\053\007\001\002" +
    "\000\026\012\053\013\050\015\046\023\047\024\051\031" +
    "\052\033\056\041\055\052\044\053\007\001\002\000\026" +
    "\012\053\013\050\015\046\023\047\024\051\031\052\033" +
    "\056\041\055\052\044\053\007\001\002\000\026\012\053" +
    "\013\050\015\046\023\047\024\051\031\052\033\056\041" +
    "\055\052\044\053\007\001\002\000\026\012\053\013\050" +
    "\015\046\023\047\024\051\031\052\033\056\041\055\052" +
    "\044\053\007\001\002\000\004\053\007\001\002\000\026" +
    "\012\053\013\050\015\046\023\047\024\051\031\052\033" +
    "\056\041\055\052\044\053\007\001\002\000\006\025\072" +
    "\053\007\001\002\000\032\030\uffcf\033\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\001\002\000\004\041\074\001\002\000" +
    "\030\012\uffbb\013\uffbb\015\uffbb\023\uffbb\024\uffbb\031\uffbb" +
    "\033\uffbb\041\uffbb\042\uffbe\052\uffbb\053\uffbb\001\002\000" +
    "\004\042\uffbf\001\002\000\004\042\103\001\002\000\026" +
    "\012\053\013\050\015\046\023\047\024\051\031\052\033" +
    "\056\041\055\052\044\053\007\001\002\000\026\012\uffbc" +
    "\013\uffbc\015\uffbc\023\uffbc\024\uffbc\031\uffbc\033\uffbc\041" +
    "\uffbc\052\uffbc\053\uffbc\001\002\000\026\030\067\033\062" +
    "\035\064\036\065\037\070\040\063\042\uffbd\043\066\047" +
    "\071\050\102\001\002\000\026\012\uffba\013\uffba\015\uffba" +
    "\023\uffba\024\uffba\031\uffba\033\uffba\041\uffba\052\uffba\053" +
    "\uffba\001\002\000\032\030\uffce\033\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\042\uffce\043\uffce\044\uffce\047\uffce\050" +
    "\uffce\051\uffce\001\002\000\032\030\uffd2\033\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\063\042\uffd2\043\066\044\uffd2\047" +
    "\071\050\uffd2\051\uffd2\001\002\000\032\030\uffc1\033\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\001\002\000\024\030\067" +
    "\033\062\035\064\036\065\037\070\040\063\043\066\044" +
    "\107\047\071\001\002\000\032\030\uffd0\033\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\001\002\000\032\030\uffd3\033\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\063\042\uffd3\043\066\044" +
    "\uffd3\047\071\050\uffd3\051\uffd3\001\002\000\032\030\uffd5" +
    "\033\062\035\uffd5\036\065\037\070\040\063\042\uffd5\043" +
    "\066\044\uffd5\047\071\050\uffd5\051\uffd5\001\002\000\032" +
    "\030\uffd1\033\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\042" +
    "\uffd1\043\066\044\uffd1\047\071\050\uffd1\051\uffd1\001\002" +
    "\000\032\030\uffd4\033\uffd4\035\uffd4\036\065\037\070\040" +
    "\063\042\uffd4\043\066\044\uffd4\047\071\050\uffd4\051\uffd4" +
    "\001\002\000\024\030\067\033\062\035\064\036\065\037" +
    "\070\040\063\042\115\043\066\047\071\001\002\000\032" +
    "\030\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002" +
    "\000\016\003\035\016\034\020\025\027\032\045\026\053" +
    "\007\001\002\000\004\017\120\001\002\000\016\003\035" +
    "\016\034\020\025\027\032\045\026\053\007\001\002\000" +
    "\030\003\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\027\uffdb\045\uffdb\046\uffdb\053\uffdb\001\002\000" +
    "\032\030\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\042\uffc3\043\066\044\uffc3\047\071\050\uffc3\051\uffc3\001" +
    "\002\000\004\043\132\001\002\000\006\041\126\043\125" +
    "\001\002\000\026\012\053\013\050\015\046\023\047\024" +
    "\051\031\052\033\056\041\055\052\044\053\007\001\002" +
    "\000\004\042\127\001\002\000\032\030\uffc4\033\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\001\002\000\024\030\067\033" +
    "\062\035\064\036\065\037\070\040\063\043\066\044\131" +
    "\047\071\001\002\000\032\030\uffc5\033\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5\044\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\001\002\000\026\012\053\013\050\015" +
    "\046\023\047\024\051\031\052\033\056\041\055\052\044" +
    "\053\007\001\002\000\024\030\067\033\062\035\064\036" +
    "\065\037\070\040\063\043\066\044\134\047\071\001\002" +
    "\000\032\030\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\001\002\000\030\012\uffbb\013\uffbb\015\uffbb\023\uffbb\024" +
    "\uffbb\031\uffbb\033\uffbb\041\uffbb\042\uffbe\052\uffbb\053\uffbb" +
    "\001\002\000\004\042\137\001\002\000\032\030\uffcd\033" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000\026\012" +
    "\053\013\050\015\046\023\047\024\051\031\052\033\056" +
    "\041\055\052\044\053\007\001\002\000\024\030\067\033" +
    "\062\035\064\036\065\037\070\040\063\042\142\043\066" +
    "\047\071\001\002\000\004\051\143\001\002\000\030\003" +
    "\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\027\uffd9\045\uffd9\046\uffd9\053\uffd9\001\002\000\004\046" +
    "\145\001\002\000\006\002\uffff\010\uffff\001\002\000\026" +
    "\012\053\013\050\015\046\023\047\024\051\031\052\033" +
    "\056\041\055\052\044\053\007\001\002\000\026\012\053" +
    "\013\050\015\046\023\047\024\051\031\052\033\056\041" +
    "\055\052\044\053\007\001\002\000\024\030\067\033\062" +
    "\035\064\036\065\037\070\040\063\043\066\044\151\047" +
    "\071\001\002\000\004\032\152\001\002\000\026\012\053" +
    "\013\050\015\046\023\047\024\051\031\052\033\056\041" +
    "\055\052\044\053\007\001\002\000\024\030\067\033\062" +
    "\035\064\036\065\037\070\040\063\043\066\047\071\051" +
    "\154\001\002\000\030\003\uffd7\014\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\027\uffd7\045\uffd7\046\uffd7\053" +
    "\uffd7\001\002\000\024\030\067\033\062\035\064\036\065" +
    "\037\070\040\063\043\066\047\071\051\156\001\002\000" +
    "\030\003\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\027\uffd8\045\uffd8\046\uffd8\053\uffd8\001\002\000" +
    "\020\003\035\016\034\020\025\027\032\045\026\046\161" +
    "\053\007\001\002\000\020\003\uffe4\016\uffe4\020\uffe4\027" +
    "\uffe4\045\uffe4\046\uffe4\053\uffe4\001\002\000\030\003\uffe2" +
    "\014\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\027" +
    "\uffe2\045\uffe2\046\uffe2\053\uffe2\001\002\000\026\012\053" +
    "\013\050\015\046\023\047\024\051\031\052\033\056\041" +
    "\055\052\044\053\007\001\002\000\024\030\067\033\062" +
    "\035\064\036\065\037\070\040\063\042\164\043\066\047" +
    "\071\001\002\000\016\003\035\016\034\020\025\027\032" +
    "\045\026\053\007\001\002\000\030\003\uffda\014\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\027\uffda\045\uffda" +
    "\046\uffda\053\uffda\001\002\000\004\002\000\001\002\000" +
    "\006\002\001\010\171\001\002\000\006\002\ufffe\010\ufffe" +
    "\001\002\000\004\053\007\001\002\000\006\002\ufffd\010" +
    "\ufffd\001\002\000\006\011\175\045\174\001\002\000\014" +
    "\004\ufff8\021\ufff8\022\ufff8\046\ufff8\053\ufff8\001\002\000" +
    "\004\053\007\001\002\000\004\045\177\001\002\000\014" +
    "\004\ufff8\021\ufff8\022\ufff8\046\ufff8\053\ufff8\001\002\000" +
    "\014\004\ufff5\021\203\022\204\046\ufff5\053\007\001\002" +
    "\000\004\053\007\001\002\000\014\004\ufff9\021\ufff9\022" +
    "\ufff9\046\ufff9\053\ufff9\001\002\000\004\053\uffe8\001\002" +
    "\000\006\043\242\053\uffe7\001\002\000\006\043\241\053" +
    "\uffe6\001\002\000\006\004\211\046\210\001\002\000\006" +
    "\004\ufff6\046\ufff6\001\002\000\006\002\ufffa\010\ufffa\001" +
    "\002\000\010\021\203\022\204\053\007\001\002\000\004" +
    "\053\007\001\002\000\004\041\214\001\002\000\012\021" +
    "\uffec\022\uffec\042\uffef\053\uffec\001\002\000\004\042\ufff0" +
    "\001\002\000\004\042\225\001\002\000\010\021\203\022" +
    "\204\053\007\001\002\000\006\042\uffee\050\224\001\002" +
    "\000\010\021\uffed\022\uffed\053\uffed\001\002\000\004\053" +
    "\007\001\002\000\006\042\uffea\050\uffea\001\002\000\010" +
    "\021\uffeb\022\uffeb\053\uffeb\001\002\000\004\045\226\001" +
    "\002\000\024\003\ufff1\014\ufff1\016\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\027\ufff1\045\ufff1\053\ufff1\001\002\000\024\003" +
    "\035\014\230\016\034\020\025\021\203\022\204\027\032" +
    "\045\026\053\007\001\002\000\026\012\053\013\050\015" +
    "\046\023\047\024\051\031\052\033\056\041\055\052\044" +
    "\053\007\001\002\000\024\003\ufff3\014\ufff3\016\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\027\ufff3\045\ufff3\053\ufff3\001\002" +
    "\000\010\032\146\043\234\053\uffe6\001\002\000\024\003" +
    "\ufff2\014\ufff2\016\ufff2\020\ufff2\021\ufff2\022\ufff2\027\ufff2" +
    "\045\ufff2\053\ufff2\001\002\000\030\012\053\013\050\015" +
    "\046\023\047\024\051\031\052\033\056\041\055\044\235" +
    "\052\044\053\007\001\002\000\004\053\uffe5\001\002\000" +
    "\024\030\067\033\062\035\064\036\065\037\070\040\063" +
    "\043\066\047\071\051\237\001\002\000\004\046\240\001" +
    "\002\000\006\004\ufff4\046\ufff4\001\002\000\004\044\235" +
    "\001\002\000\004\044\243\001\002\000\004\053\uffe9\001" +
    "\002\000\004\051\245\001\002\000\030\003\ufff7\004\ufff7" +
    "\014\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\027\ufff7\045" +
    "\ufff7\046\ufff7\053\ufff7\001\002\000\014\004\ufff5\021\203" +
    "\022\204\046\ufff5\053\007\001\002\000\006\004\211\046" +
    "\250\001\002\000\006\002\ufffb\010\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\006\002\004\003\003\001\001\000\004\004" +
    "\166\001\001\000\002\001\001\000\004\037\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\023\027\024\040\025\035\026\030\027" +
    "\032\030\036\031\037\037\026\001\001\000\002\001\001" +
    "\000\004\022\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\053\037\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\121\037\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\113\037\044\001\001\000\004\037\056\001" +
    "\001\000\002\001\001\000\006\036\060\037\044\001\001" +
    "\000\002\001\001\000\006\036\112\037\044\001\001\000" +
    "\006\036\111\037\044\001\001\000\006\036\110\037\044" +
    "\001\001\000\006\036\107\037\044\001\001\000\006\036" +
    "\105\037\044\001\001\000\004\037\104\001\001\000\006" +
    "\036\103\037\044\001\001\000\004\037\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\075\033\074" +
    "\034\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\035\077\036\100\037\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\023\116\024\040\025\035\026\030\027\032\030" +
    "\036\031\037\037\026\001\001\000\002\001\001\000\022" +
    "\023\120\024\040\025\035\026\030\027\032\030\036\031" +
    "\037\037\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\127\037" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\132\037\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\135" +
    "\033\074\034\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\140\037\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\154\037\044\001\001\000\006" +
    "\036\147\037\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\152\037\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\157\024\040\025\035\026\030\027\032\030\036" +
    "\031\037\037\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\162\037\044\001\001\000\002\001\001" +
    "\000\022\023\164\024\040\025\035\026\030\027\032\030" +
    "\036\031\037\037\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\167\006\171\001\001\000\002\001" +
    "\001\000\004\037\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\245\001\001\000\004\037\175\001" +
    "\001\000\002\001\001\000\004\012\177\001\001\000\012" +
    "\007\205\013\201\021\200\037\204\001\001\000\004\037" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\211\037\204" +
    "\001\001\000\004\037\212\001\001\000\002\001\001\000" +
    "\010\014\215\015\214\016\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\220\020\217\021\221\037" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\226\001\001\000\026\013\230" +
    "\021\200\023\232\024\040\025\035\026\030\027\032\030" +
    "\036\031\037\037\231\001\001\000\006\036\235\037\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\147\037\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\246\013\201\021" +
    "\200\037\204\001\001\000\004\010\206\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiniJavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiniJavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiniJavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /**
     * Overrides default report_error message to also print out
     * line/column number information.
     */
    public void report_error(String message, Object info)
    {
        StringBuffer errMsg = new StringBuffer("Error");

        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;

            if (symbol.left >= 0) {
                errMsg.append(" in line " + (symbol.left + 1));

                if (symbol.right >= 0) {
                    errMsg.append(", column " + (symbol.right + 1));
                }
            }
        }

        errMsg.append(" : " + message);

        System.err.println(errMsg);
    }

    /**
     * Override default report_fatal_error to take advantage of our
     * report_error().
     */
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        done_parsing();
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MiniJavaParser$actions {
  private final MiniJavaParser parser;

  /** Constructor */
  CUP$MiniJavaParser$actions(MiniJavaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MiniJavaParser$do_action(
    int                        CUP$MiniJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$MiniJavaParser$parser,
    java.util.Stack            CUP$MiniJavaParser$stack,
    int                        CUP$MiniJavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiniJavaParser$result;

      /* select the action based on the action number */
      switch (CUP$MiniJavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // id ::= ID 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new Identifier(id);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("id",29, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prevExpr ::= expr COMMA 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = e;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("prevExpr",27, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prevExprs ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("prevExprs",26, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prevExprs ::= prevExprs prevExpr 
            {
              ExpList RESULT =null;
		int pesleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int pesright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ExpList pes = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp pe = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (pes == null) {
            pes = new ExpList();
        }
        pes.addElement(pe);
        RESULT = pes;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("prevExprs",26, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exprList ::= prevExprs expr 
            {
              ExpList RESULT =null;
		int pesleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int pesright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ExpList pes = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (pes == null) {
            pes = new ExpList();
        }
        pes.addElement(e);
        RESULT = pes;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exprList",25, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // optExprList ::= 
            {
              ExpList RESULT =null;
		
        RESULT = new ExpList();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("optExprList",24, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // optExprList ::= exprList 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = el;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("optExprList",24, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= LT id GT expr 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new Cast(new IdentifierType(id.s), e);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr INSTANCEOF id 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new InstanceOf(e, new IdentifierType(id.s));
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= LPAREN expr RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = e;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= BANG expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new Not(e);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= NEW id LPAREN RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
        RESULT = new NewObject(id);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= NEW id LBRACK expr RBRACK 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new NewObjArray(id, e);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= NEW INT LBRACK expr RBRACK 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new NewArray(e);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= SUPER 
            {
              Exp RESULT =null;
		
        RESULT = new Super();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= THIS 
            {
              Exp RESULT =null;
		
        RESULT = new This();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= id 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new IdentifierExp(id.s);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= FALSE 
            {
              Exp RESULT =null;
		
        RESULT = new False();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= TRUE 
            {
              Exp RESULT =null;
		
        RESULT = new True();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= INTEGER 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT =  new IntegerLiteral(i.intValue());
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= id LPAREN optExprList RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int oelleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int oelright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ExpList oel = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new LocalCall(id, oel);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr DOT id LPAREN optExprList RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int oelleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int oelright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ExpList oel = (ExpList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new Call(e, id, oel);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DOT LENGTH 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
        RESULT = new ArrayLength(e);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr LBRACK expr RBRACK 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new ArrayLookup(e1, e2);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr STAR expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new Times(e1, e2);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MINUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new Minus(e1, e2);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr PLUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new Plus(e1, e2);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr LT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new LessThan(e1, e2);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr AND expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new And(e1, e2);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expr",28, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // errorStmt ::= error SEMI 
            {
              Statement RESULT =null;
		
        RESULT = new ErrorStmt();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("errorStmt",23, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arrayAssignStmt ::= id LBRACK expr RBRACK EQ expr SEMI 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new ArrayAssign(id, e1, e2);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("arrayAssignStmt",22, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignStmt ::= id EQ expr SEMI 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new Assign(id, e);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("assignStmt",21, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // printStmt ::= PRINTLN LPAREN expr RPAREN SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
        RESULT = new Print(e);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("printStmt",20, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // whileStmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new While(e, s);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("whileStmt",19, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ifStmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new If(e, s1, s2);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("ifStmt",18, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= errorStmt 
            {
              Statement RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement es = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = es;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= arrayAssignStmt 
            {
              Statement RESULT =null;
		int aasleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aasright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement aas = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = aas;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= assignStmt 
            {
              Statement RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement as = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = as;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= printStmt 
            {
              Statement RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement ps = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = ps;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= whileStmt 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement ws = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = ws;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= ifStmt 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement is = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = is;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= LBRACE stmts RBRACE 
            {
              Statement RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		StatementList ss = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT =  new Block(ss);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("stmt",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmts ::= 
            {
              StatementList RESULT =null;
		
        RESULT = new StatementList();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmts ::= stmts stmt 
            {
              StatementList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		StatementList ss = (StatementList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (ss == null) {
            ss = new StatementList();
        }
        ss.addElement(s);
        RESULT = ss;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= id LBRACK RBRACK 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
        RESULT = new ObjArrayType(id.s);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= id 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new IdentifierType(id.s);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= INT 
            {
              Type RESULT =null;
		
        RESULT = new IntegerType();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		
        RESULT = new BooleanType();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= INT LBRACK RBRACK 
            {
              Type RESULT =null;
		
        RESULT = new IntArrayType();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arg ::= type id 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new Formal(t, id);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("arg",14, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prevArg ::= arg COMMA 
            {
              Formal RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Formal a = (Formal)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = a;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("prevArg",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prevArgs ::= 
            {
              FormalList RESULT =null;
		
        RESULT = new FormalList();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("prevArgs",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prevArgs ::= prevArgs prevArg 
            {
              FormalList RESULT =null;
		int pasleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		FormalList pas = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Formal pa = (Formal)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (pas == null) {
            pas = new FormalList();
        }
        pas.addElement(pa);
        RESULT = pas;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("prevArgs",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argList ::= prevArgs arg 
            {
              FormalList RESULT =null;
		int pasleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		FormalList pas = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Formal a = (Formal)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (pas == null) {
            pas = new FormalList();
        }
        pas.addElement(a);
        RESULT = pas;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("argList",11, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optArgList ::= 
            {
              FormalList RESULT =null;
		
        RESULT = new FormalList();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("optArgList",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optArgList ::= argList 
            {
              FormalList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		FormalList al = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = al;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("optArgList",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodBlock ::= 
            {
              MethodBlock RESULT =null;
		
        RESULT = new MethodBlock();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodBlock",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methodBlock ::= methodBlock stmt 
            {
              MethodBlock RESULT =null;
		int mbleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodBlock mb = (MethodBlock)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (mb == null) {
            mb = new MethodBlock();
        }
        mb.addElement(s);
        RESULT = mb;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodBlock",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methodBlock ::= methodBlock varDecl 
            {
              MethodBlock RESULT =null;
		int mbleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodBlock mb = (MethodBlock)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (mb == null) {
            mb = new MethodBlock();
        }
        mb.addElement(vd);
        RESULT = mb;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodBlock",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methodDecl ::= PUBLIC type id LPAREN optArgList RPAREN LBRACE methodBlock RETURN expr SEMI RBRACE 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-9)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-9)).value;
		int oalleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).left;
		int oalright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).right;
		FormalList oal = (FormalList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).value;
		int mbleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int mbright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		MethodBlock mb = (MethodBlock)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
        RESULT = new MethodDecl(t, id, oal, mb, e);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodDecl",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methodDecls ::= 
            {
              MethodDeclList RESULT =null;
		
        RESULT = new MethodDeclList();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodDecls",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methodDecls ::= methodDecls methodDecl 
            {
              MethodDeclList RESULT =null;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList mds = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (mds == null) {
            mds = new MethodDeclList();
        }
        mds.addElement(md);
        RESULT = mds;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("methodDecls",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDecl ::= type id SEMI 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new VarDecl(t, id);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("varDecl",9, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDecls ::= 
            {
              VarDeclList RESULT =null;
		
        RESULT = new VarDeclList();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("varDecls",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecls ::= varDecls varDecl 
            {
              VarDeclList RESULT =null;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		VarDeclList vds = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (vds == null) {
            vds = new VarDeclList();
        }
        vds.addElement(vd);
        RESULT = vds;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("varDecls",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classDeclExt ::= CLASS id EXTENDS id LBRACE varDecls methodDecls RBRACE 
            {
              ClassDecl RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		VarDeclList vds = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList mds = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new ClassDeclExtends(id1, id2, vds, mds);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDeclExt",4, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDecl ::= CLASS id LBRACE varDecls methodDecls RBRACE 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		VarDeclList vds = (VarDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MethodDeclList mds = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		
        RESULT = new ClassDeclSimple(id, vds, mds);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDecl",3, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecls ::= 
            {
              ClassDeclList RESULT =null;
		
        RESULT = new ClassDeclList();
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDecls",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecls ::= classDecls classDeclExt 
            {
              ClassDeclList RESULT =null;
		int cdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int cdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ClassDeclList cds = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cdeleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cderight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDecl cde = (ClassDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (cds == null) {
            cds = new ClassDeclList();
        }
        cds.addElement(cde);
        RESULT = cds;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDecls",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDecls ::= classDecls classDecl 
            {
              ClassDeclList RESULT =null;
		int cdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int cdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		ClassDeclList cds = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        if (cds == null) {
            cds = new ClassDeclList();
        }
        cds.addElement(cd);
        RESULT = cds;
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classDecls",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainClass ::= CLASS id LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK id RPAREN LBRACE stmt RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		
        RESULT = new MainClass(id1, id2, s);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-16)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		RESULT = start_val;
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiniJavaParser$parser.done_parsing();
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= mainClass classDecls 
            {
              Program RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cdsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cdsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		ClassDeclList cds = (ClassDeclList)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
        RESULT = new Program(mc, cds);
    
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

