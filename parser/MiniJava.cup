/*
 * Parser specification for MiniJava compiler.
 *
 * To run: java -jar path-to-java-cup-11a.jar MiniJava.cup
 *
 * ------------------------------------------------------------------
 *
 * @begin[license]
 * Copyright (C) Kai Chen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * @author: Kai Chen
 * @end[license]
 *
 */

package parser;
import java_cup.runtime.*;
import syntaxtree.*;

/**
 * More informative error message printing.
 */

parser code {:

    /**
     * Overrides default report_error message to also print out
     * line/column number information.
     */
    public void report_error(String message, Object info)
    {
        StringBuffer errMsg = new StringBuffer("Error");

        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;

            if (symbol.left >= 0) {
                errMsg.append(" in line " + (symbol.left + 1));

                if (symbol.right >= 0) {
                    errMsg.append(", column " + (symbol.right + 1));
                }
            }
        }

        errMsg.append(" : " + message);

        System.err.println(errMsg);
    }

    /**
     * Override default report_fatal_error to take advantage of our
     * report_error().
     */
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        done_parsing();
    }

:};


/**
 * Terminals
 */

terminal PUBLIC, STATIC, VOID, MAIN, CLASS, EXTENDS, THIS, SUPER, RETURN, NEW,
         IF, ELSE, WHILE, BOOLEAN, INT, TRUE, FALSE, LENGTH, STRING, PRINTLN, INSTANCEOF;

terminal BANG, EQ, LT, GT, AND, PLUS, MINUS, STAR,
         LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE,
         DOT, COMMA, SEMI;

terminal Integer INTEGER;

terminal String ID;


/**
 * Non-terminals
 */

non terminal Program program;
non terminal MainClass mainClass;
non terminal ClassDeclList classDecls;
non terminal ClassDecl classDecl, classDeclExt;
non terminal MethodDeclList methodDecls;
non terminal MethodDecl methodDecl;
non terminal MethodBlock methodBlock;
non terminal VarDeclList varDecls;
non terminal VarDecl varDecl;
non terminal FormalList optArgList, argList, prevArgs;
non terminal Formal prevArg, arg;
non terminal Type type;
non terminal StatementList stmts;
non terminal Statement stmt, ifStmt, whileStmt, printStmt, assignStmt, arrayAssignStmt, errorStmt;
non terminal ExpList optExprList, exprList, prevExprs;
non terminal Exp prevExpr, expr;
non terminal Identifier id;


/**
 * Precedence & associativity
 */

precedence left AND;
precedence left LT;
precedence left PLUS, MINUS;
precedence left STAR;
precedence right BANG;
precedence left GT;
precedence left DOT, LBRACK;


/**
 * Grammar
 */

program ::=
    mainClass:mc classDecls:cds
    {:
        RESULT = new Program(mc, cds);
    :}
    ;

mainClass ::=
    CLASS id:id1 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK id:id2 RPAREN LBRACE stmt:s RBRACE RBRACE
    {:
        RESULT = new MainClass(id1, id2, s);
    :}
    ;

classDecls ::=
    classDecls:cds classDecl:cd
    {:
        if (cds == null) {
            cds = new ClassDeclList();
        }
        cds.addElement(cd);
        RESULT = cds;
    :}
    |
    classDecls:cds classDeclExt:cde
    {:
        if (cds == null) {
            cds = new ClassDeclList();
        }
        cds.addElement(cde);
        RESULT = cds;
    :}
    |
    {:
        RESULT = new ClassDeclList();
    :}
    ;

classDecl ::=
    CLASS id:id LBRACE varDecls:vds methodDecls:mds RBRACE
    {:
        RESULT = new ClassDeclSimple(id, vds, mds);
    :}
    ;

classDeclExt ::=
    CLASS id:id1 EXTENDS id:id2 LBRACE varDecls:vds methodDecls:mds RBRACE
    {:
        RESULT = new ClassDeclExtends(id1, id2, vds, mds);
    :}
    ;

varDecls ::=
    varDecls:vds varDecl:vd
    {:
        if (vds == null) {
            vds = new VarDeclList();
        }
        vds.addElement(vd);
        RESULT = vds;
    :}
    |
    {:
        RESULT = new VarDeclList();
    :}
    ;

varDecl ::=
    type:t id:id SEMI
    {:
        RESULT = new VarDecl(t, id);
    :}
    ;

methodDecls ::=
    methodDecls:mds methodDecl:md
    {:
        if (mds == null) {
            mds = new MethodDeclList();
        }
        mds.addElement(md);
        RESULT = mds;
    :}
    |
    {:
        RESULT = new MethodDeclList();
    :}
    ;

methodDecl ::=
    PUBLIC type:t id:id LPAREN optArgList:oal RPAREN LBRACE methodBlock:mb RETURN expr:e SEMI RBRACE
    {:
        RESULT = new MethodDecl(t, id, oal, mb, e);
    :}
    ;

methodBlock ::=
    methodBlock:mb varDecl:vd
    {:
        if (mb == null) {
            mb = new MethodBlock();
        }
        mb.addElement(vd);
        RESULT = mb;
    :}
    |
    methodBlock:mb stmt:s
    {:
        if (mb == null) {
            mb = new MethodBlock();
        }
        mb.addElement(s);
        RESULT = mb;
    :}
    |
    {:
        RESULT = new MethodBlock();
    :}
    ;

optArgList ::=
    argList:al
    {:
        RESULT = al;
    :}
    |
    {:
        RESULT = new FormalList();
    :}
    ;

argList ::=
    prevArgs:pas arg:a
    {:
        if (pas == null) {
            pas = new FormalList();
        }
        pas.addElement(a);
        RESULT = pas;
    :}
    ;

prevArgs ::=
    prevArgs:pas prevArg:pa
    {:
        if (pas == null) {
            pas = new FormalList();
        }
        pas.addElement(pa);
        RESULT = pas;
    :}
    |
    {:
        RESULT = new FormalList();
    :}
    ;

prevArg ::=
    arg:a COMMA
    {:
        RESULT = a;
    :}
    ;

arg ::=
    type:t id:id
    {:
        RESULT = new Formal(t, id);
    :}
    ;

type ::=
    INT LBRACK RBRACK
    {:
        RESULT = new IntArrayType();
    :}
    |
    BOOLEAN
    {:
        RESULT = new BooleanType();
    :}
    |
    INT
    {:
        RESULT = new IntegerType();
    :}
    |
    id:id
    {:
        RESULT = new IdentifierType(id.s);
    :}
    |
    id:id LBRACK RBRACK
    {:
        RESULT = new ObjArrayType(id.s);
    :}
    ;

stmts ::=
    stmts:ss stmt:s
    {:
        if (ss == null) {
            ss = new StatementList();
        }
        ss.addElement(s);
        RESULT = ss;
    :}
    |
    {:
        RESULT = new StatementList();
    :}
    ;

stmt ::=
    LBRACE stmts:ss RBRACE
    {:
        RESULT =  new Block(ss);
    :}
    |
    ifStmt:is
    {:
        RESULT = is;
    :}
    |
    whileStmt:ws
    {:
        RESULT = ws;
    :}
    |
    printStmt:ps
    {:
        RESULT = ps;
    :}
    |
    assignStmt:as
    {:
        RESULT = as;
    :}
    |
    arrayAssignStmt:aas
    {:
        RESULT = aas;
    :}
    |
    errorStmt:es
    {:
        RESULT = es;
    :}
    ;

ifStmt ::=
    IF LPAREN expr:e RPAREN stmt:s1 ELSE stmt:s2
    {:
        RESULT = new If(e, s1, s2);
    :}
    ;

whileStmt ::=
    WHILE LPAREN expr:e RPAREN stmt:s
    {:
        RESULT = new While(e, s);
    :}
    ;

printStmt ::=
    PRINTLN LPAREN expr:e RPAREN SEMI
    {:
        RESULT = new Print(e);
    :}
    ;

assignStmt ::=
    id:id EQ expr:e SEMI
    {:
        RESULT = new Assign(id, e);
    :}
    ;

arrayAssignStmt ::=
    id:id LBRACK expr:e1 RBRACK EQ expr:e2 SEMI
    {:
        RESULT = new ArrayAssign(id, e1, e2);
    :}
    ;

errorStmt ::=
    error SEMI
    {:
        RESULT = new ErrorStmt();
    :}
    ;

expr ::=
    expr:e1 AND expr:e2
    {:
        RESULT = new And(e1, e2);
    :}
    |
    expr:e1 LT expr:e2
    {:
        RESULT = new LessThan(e1, e2);
    :}
    |
    expr:e1 PLUS expr:e2
    {:
        RESULT = new Plus(e1, e2);
    :}
    |
    expr:e1 MINUS expr:e2
    {:
        RESULT = new Minus(e1, e2);
    :}
    |
    expr:e1 STAR expr:e2
    {:
        RESULT = new Times(e1, e2);
    :}
    |
    expr:e1 LBRACK expr:e2 RBRACK
    {:
        RESULT = new ArrayLookup(e1, e2);
    :}
    |
    expr:e DOT LENGTH
    {:
        RESULT = new ArrayLength(e);
    :}
    |
    expr:e DOT id:id LPAREN optExprList:oel RPAREN
    {:
        RESULT = new Call(e, id, oel);
    :}
    |
    id:id LPAREN optExprList:oel RPAREN
    {:
        RESULT = new LocalCall(id, oel);
    :}
    |
    INTEGER:i
    {:
        RESULT =  new IntegerLiteral(i.intValue());
    :}
    |
    TRUE
    {:
        RESULT = new True();
    :}
    |
    FALSE
    {:
        RESULT = new False();
    :}
    |
    id:id
    {:
        RESULT = new IdentifierExp(id.s);
    :}
    |
    THIS
    {:
        RESULT = new This();
    :}
    |
    SUPER
    {:
        RESULT = new Super();
    :}
    |
    NEW INT LBRACK expr:e RBRACK
    {:
        RESULT = new NewArray(e);
    :}
    |
    NEW id:id LBRACK expr:e RBRACK
    {:
        RESULT = new NewObjArray(id, e);
    :}
    |
    NEW id:id LPAREN RPAREN
    {:
        RESULT = new NewObject(id);
    :}
    |
    BANG expr:e
    {:
        RESULT = new Not(e);
    :}
    |
    LPAREN expr:e RPAREN
    {:
        RESULT = e;
    :}
    |
    expr:e INSTANCEOF id:id
    {:
        RESULT = new InstanceOf(e, new IdentifierType(id.s));
    :}
    |
    LT id:id GT expr:e
    {:
        RESULT = new Cast(new IdentifierType(id.s), e);
    :}
    ;

optExprList ::=
    exprList:el
    {:
        RESULT = el;
    :}
    |
    {:
        RESULT = new ExpList();
    :}
    ;

exprList ::=
    prevExprs:pes expr:e
    {:
        if (pes == null) {
            pes = new ExpList();
        }
        pes.addElement(e);
        RESULT = pes;
    :}
    ;

prevExprs ::=
    prevExprs:pes prevExpr:pe
    {:
        if (pes == null) {
            pes = new ExpList();
        }
        pes.addElement(pe);
        RESULT = pes;
    :}
    |
    {: RESULT = new ExpList(); :}
    ;

prevExpr ::=
    expr:e COMMA
    {:
        RESULT = e;
    :}
    ;

id ::=
    ID:id
    {:
        RESULT = new Identifier(id);
    :}
    ;


